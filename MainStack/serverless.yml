service: dev-gxp-service

custom:
  corsConfig:
    origin: '*'
    headers:
      - Content-Type
      - X-Api-Key
      - authorization

  authorizerConfig:
    name: JwtAuthorizer
    resultTtlInSeconds: 0
    identitySource: method.request.header.Authorization
  
  jwtEnvironment:
    JWT_SECRET: gxp-lambda-t8ud@*d!85fc7lfw1ft2d9$=ni@=oo8&#*ae#lzfkg(sej_1(936936-


provider:
  name: aws
  runtime: python3.9
  stage: dev
  region: us-east-1
  layers:
    - arn:aws:lambda:us-east-1:813259119770:layer:GXP-Lambda:1

  apiGateway:
    apiKeys:
      - ${self:provider.environment.MY_API_KEY}

  environment:
    MY_API_KEY: ${self:service}_apikey_${opt:stage, self:provider.stage}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:*
            - lambda:*
          Resource: "*"

package:
  include:
    - ../utils/**
    - ../templates/**


functions:
  # Database Connection
  dbConnection:
    handler: app_setting.db_conenction.dbConnection
    timeout: 20

  # JWT Authentication
  JwtAuthorizer:
    handler: app_setting.jwt_auth.JwtAuthorizer
    timeout: 10
    environment: ${self:custom.jwtEnvironment}

  # S3 Media File handler
  s3MediaHandler:
    handler: app_setting.s3_media.s3MediaHandler
    events:
      - http:
          path: app/s3-media
          method: post
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
          request:
            schemas:
              application/json: ${file(../models/app_setting/s3_media/upload_file.json)}
      - http:
          path: app/s3-media
          method: delete
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
          request:
            schemas:
              application/json: ${file(../models/app_setting/s3_media/delete_file.json)}


  # lambda helth check function
  lambdaHealthCheck:
    handler: app_setting.lambda_health.lambdaHealthCheck
    events:
      - http:
          path: health-check
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Api-Key

  # App platform
  appPlatformListCreateUpdate:
    handler: app.app_platform.appPlatformListCreateUpdate
    events:
      - http:
          path: app/app-platform
          method: get
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
      - http:
          path: app/app-platform
          method: post
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
          request:
            schemas:
              application/json: ${file(../models/app/app_platform/platform_create_update.json)}

  # App module
  appModuleListCreateUpdateDestroy:
    handler: app.app_module.appModuleListCreateUpdateDestroy
    events:
      - http:
          path: app/app-module
          method: get
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
      - http:
          path: app/app-module
          method: post
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
          request:
            schemas:
              application/json: ${file(../models/app/app_module/module_create.json)}
      - http:
          path: app/app-module/{app_module_id}
          method: patch
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
          request:
            schemas:
              application/json: ${file(../models/app/app_module/module_update.json)}
      - http:
          path: app/app-module/{app_module_id}
          method: delete
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
  

  # App permission
  appPermissionListCreateUpdateDestroy:
    handler: app.app_permission.appPermissionListCreateUpdateDestroy
    events:
      - http:
          path: app/app-permission
          method: get
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
      - http:
          path: app/app-permission
          method: post
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
          request:
            schemas:
              application/json: ${file(../models/app/app_permission/permission_create.json)}
      - http:
          path: app/app-permission/{app_permission_id}
          method: patch
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
          request:
            schemas:
              application/json: ${file(../models/app/app_permission/permission_update.json)}
      - http:
          path: app/app-permission/{app_permission_id}
          method: delete
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}


  # Auth group
  appGroupListCreateUpdateDestroy:
    handler: app.app_group.appGroupListCreateUpdateDestroy
    events:
      - http:
          path: app/app-group
          method: get
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
      - http:
          path: app/app-group
          method: post
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
          request:
            schemas:
              application/json: ${file(../models/app/app_group/group_create.json)}
      - http:
          path: app/app-group/{app_group_id}
          method: patch
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}
          request:
            schemas:
              application/json: ${file(../models/app/app_group/group_update.json)}
      - http:
          path: app/app-group/{app_group_id}
          method: delete
          cors: ${self:custom.corsConfig}
          authorizer: ${self:custom.authorizerConfig}


resources:
  - Outputs:
      ApiGatewayRestApiId:
        Value:
          Ref: ApiGatewayRestApi
        Export:
          Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiId

      ApiGatewayRestApiRootResourceId:
        Value:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        Export:
          Name: ${self:service}-${self:provider.stage}-ApiGatewayRestApiRootResourceId
