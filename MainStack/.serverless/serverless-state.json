{
  "service": {
    "service": "dev-gxp-service",
    "serviceObject": {
      "name": "dev-gxp-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.9",
      "stage": "dev",
      "region": "us-east-1",
      "layers": [
        "arn:aws:lambda:us-east-1:813259119770:layer:GXP-Lambda:1"
      ],
      "apiGateway": {
        "apiKeys": [
          "dev-gxp-service_apikey_dev"
        ]
      },
      "environment": {
        "MY_API_KEY": "dev-gxp-service_apikey_dev"
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:*",
                "lambda:*"
              ],
              "Resource": "*"
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "DbConnectionLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dev-gxp-service-dev-dbConnection"
            }
          },
          "JwtAuthorizerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dev-gxp-service-dev-JwtAuthorizer"
            }
          },
          "S3MediaHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dev-gxp-service-dev-s3MediaHandler"
            }
          },
          "LambdaHealthCheckLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dev-gxp-service-dev-lambdaHealthCheck"
            }
          },
          "AppPlatformListCreateUpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dev-gxp-service-dev-appPlatformListCreateUpdate"
            }
          },
          "AppModuleListCreateUpdateDestroyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dev-gxp-service-dev-appModuleListCreateUpdateDestroy"
            }
          },
          "AppPermissionListCreateUpdateDestroyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dev-gxp-service-dev-appPermissionListCreateUpdateDestroy"
            }
          },
          "AppGroupListCreateUpdateDestroyLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/dev-gxp-service-dev-appGroupListCreateUpdateDestroy"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev-gxp-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dev-gxp-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/dev-gxp-service-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "dev-gxp-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "DbConnectionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dev-gxp-service/dev/1718262114617-2024-06-13T07:01:54.617Z/dev-gxp-service.zip"
              },
              "Handler": "app_setting.db_conenction.dbConnection",
              "Runtime": "python3.9",
              "FunctionName": "dev-gxp-service-dev-dbConnection",
              "MemorySize": 1024,
              "Timeout": 20,
              "Environment": {
                "Variables": {
                  "MY_API_KEY": "dev-gxp-service_apikey_dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:813259119770:layer:GXP-Lambda:1"
              ]
            },
            "DependsOn": [
              "DbConnectionLogGroup"
            ]
          },
          "JwtAuthorizerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dev-gxp-service/dev/1718262114617-2024-06-13T07:01:54.617Z/dev-gxp-service.zip"
              },
              "Handler": "app_setting.jwt_auth.JwtAuthorizer",
              "Runtime": "python3.9",
              "FunctionName": "dev-gxp-service-dev-JwtAuthorizer",
              "MemorySize": 1024,
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "MY_API_KEY": "dev-gxp-service_apikey_dev",
                  "JWT_SECRET": "gxp-lambda-t8ud@*d!85fc7lfw1ft2d9$=ni@=oo8&#*ae#lzfkg(sej_1(936936-"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:813259119770:layer:GXP-Lambda:1"
              ]
            },
            "DependsOn": [
              "JwtAuthorizerLogGroup"
            ]
          },
          "S3MediaHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dev-gxp-service/dev/1718262114617-2024-06-13T07:01:54.617Z/dev-gxp-service.zip"
              },
              "Handler": "app_setting.s3_media.s3MediaHandler",
              "Runtime": "python3.9",
              "FunctionName": "dev-gxp-service-dev-s3MediaHandler",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MY_API_KEY": "dev-gxp-service_apikey_dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:813259119770:layer:GXP-Lambda:1"
              ]
            },
            "DependsOn": [
              "S3MediaHandlerLogGroup"
            ]
          },
          "LambdaHealthCheckLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dev-gxp-service/dev/1718262114617-2024-06-13T07:01:54.617Z/dev-gxp-service.zip"
              },
              "Handler": "app_setting.lambda_health.lambdaHealthCheck",
              "Runtime": "python3.9",
              "FunctionName": "dev-gxp-service-dev-lambdaHealthCheck",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MY_API_KEY": "dev-gxp-service_apikey_dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:813259119770:layer:GXP-Lambda:1"
              ]
            },
            "DependsOn": [
              "LambdaHealthCheckLogGroup"
            ]
          },
          "AppPlatformListCreateUpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dev-gxp-service/dev/1718262114617-2024-06-13T07:01:54.617Z/dev-gxp-service.zip"
              },
              "Handler": "app.app_platform.appPlatformListCreateUpdate",
              "Runtime": "python3.9",
              "FunctionName": "dev-gxp-service-dev-appPlatformListCreateUpdate",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MY_API_KEY": "dev-gxp-service_apikey_dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:813259119770:layer:GXP-Lambda:1"
              ]
            },
            "DependsOn": [
              "AppPlatformListCreateUpdateLogGroup"
            ]
          },
          "AppModuleListCreateUpdateDestroyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dev-gxp-service/dev/1718262114617-2024-06-13T07:01:54.617Z/dev-gxp-service.zip"
              },
              "Handler": "app.app_module.appModuleListCreateUpdateDestroy",
              "Runtime": "python3.9",
              "FunctionName": "dev-gxp-service-dev-appModuleListCreateUpdateDestroy",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MY_API_KEY": "dev-gxp-service_apikey_dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:813259119770:layer:GXP-Lambda:1"
              ]
            },
            "DependsOn": [
              "AppModuleListCreateUpdateDestroyLogGroup"
            ]
          },
          "AppPermissionListCreateUpdateDestroyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dev-gxp-service/dev/1718262114617-2024-06-13T07:01:54.617Z/dev-gxp-service.zip"
              },
              "Handler": "app.app_permission.appPermissionListCreateUpdateDestroy",
              "Runtime": "python3.9",
              "FunctionName": "dev-gxp-service-dev-appPermissionListCreateUpdateDestroy",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MY_API_KEY": "dev-gxp-service_apikey_dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:813259119770:layer:GXP-Lambda:1"
              ]
            },
            "DependsOn": [
              "AppPermissionListCreateUpdateDestroyLogGroup"
            ]
          },
          "AppGroupListCreateUpdateDestroyLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/dev-gxp-service/dev/1718262114617-2024-06-13T07:01:54.617Z/dev-gxp-service.zip"
              },
              "Handler": "app.app_group.appGroupListCreateUpdateDestroy",
              "Runtime": "python3.9",
              "FunctionName": "dev-gxp-service-dev-appGroupListCreateUpdateDestroy",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MY_API_KEY": "dev-gxp-service_apikey_dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                "arn:aws:lambda:us-east-1:813259119770:layer:GXP-Lambda:1"
              ]
            },
            "DependsOn": [
              "AppGroupListCreateUpdateDestroyLogGroup"
            ]
          },
          "DbConnectionLambdaVersionUbHokbTP1kD9YvMJtcufQd5KefaeaYvequtAlI3tot0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DbConnectionLambdaFunction"
              },
              "CodeSha256": "2jzGqLjOy1YnqOCENeGAdaCjzUKEFxnFrCC8SbIf/QY="
            }
          },
          "JwtAuthorizerLambdaVersionsu7CGVqcqE93zUhrMFc7OSBZsXM310xPyfdye1Bw0I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "JwtAuthorizerLambdaFunction"
              },
              "CodeSha256": "2jzGqLjOy1YnqOCENeGAdaCjzUKEFxnFrCC8SbIf/QY="
            }
          },
          "S3MediaHandlerLambdaVersionQnlN9uwPBlzJagbRjmHsm2xt7d9wWCMXK1NEUutNgNo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "S3MediaHandlerLambdaFunction"
              },
              "CodeSha256": "2jzGqLjOy1YnqOCENeGAdaCjzUKEFxnFrCC8SbIf/QY="
            }
          },
          "LambdaHealthCheckLambdaVersionKejm3uVTGdpuX7QYSXXEOFhcr7QGFpAVMghkmD4AU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LambdaHealthCheckLambdaFunction"
              },
              "CodeSha256": "2jzGqLjOy1YnqOCENeGAdaCjzUKEFxnFrCC8SbIf/QY="
            }
          },
          "AppPlatformListCreateUpdateLambdaVersion4J9AHntfnwZpoxb3HJEv1gqUKIUPYshvqUZqWMlITNo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppPlatformListCreateUpdateLambdaFunction"
              },
              "CodeSha256": "2jzGqLjOy1YnqOCENeGAdaCjzUKEFxnFrCC8SbIf/QY="
            }
          },
          "AppModuleListCreateUpdateDestroyLambdaVersion1V5BNtDZKKsa5PJhiyXSN1wV2VzrBiLfLBtloAqLZk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppModuleListCreateUpdateDestroyLambdaFunction"
              },
              "CodeSha256": "2jzGqLjOy1YnqOCENeGAdaCjzUKEFxnFrCC8SbIf/QY="
            }
          },
          "AppPermissionListCreateUpdateDestroyLambdaVersionv6Cy3CeboufBGehbUkf164IFIaOqt4FLkvOiMZpGiU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppPermissionListCreateUpdateDestroyLambdaFunction"
              },
              "CodeSha256": "2jzGqLjOy1YnqOCENeGAdaCjzUKEFxnFrCC8SbIf/QY="
            }
          },
          "AppGroupListCreateUpdateDestroyLambdaVersiontnl4Q1njI51YutCoF6JFKyqYkVNRJxEYLnxDujw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AppGroupListCreateUpdateDestroyLambdaFunction"
              },
              "CodeSha256": "2jzGqLjOy1YnqOCENeGAdaCjzUKEFxnFrCC8SbIf/QY="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-dev-gxp-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceApp": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "app",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppS3Dashmedia": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApp"
              },
              "PathPart": "s3-media",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppS3DashmediaGet": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAppS3Dashmedia"
              },
              "PathPart": "get",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppAppDashplatform": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApp"
              },
              "PathPart": "app-platform",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppAppDashmodule": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApp"
              },
              "PathPart": "app-module",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppAppDashmoduleAppmoduleidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAppAppDashmodule"
              },
              "PathPart": "{app_module_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppAppDashpermission": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApp"
              },
              "PathPart": "app-permission",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppAppDashpermissionApppermissionidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAppAppDashpermission"
              },
              "PathPart": "{app_permission_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppAppDashgroup": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceApp"
              },
              "PathPart": "app-group",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAppAppDashgroupAppgroupidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAppAppDashgroup"
              },
              "PathPart": "{app_group_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceHealthDashcheck": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "health-check",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppS3DashmediaGetOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Api-Key,authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppS3DashmediaGet"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppS3DashmediaOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Api-Key,authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppS3Dashmedia"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHealthDashcheckOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Api-Key'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealthDashcheck"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppAppDashplatformOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Api-Key,authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashplatform"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppAppDashmoduleOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Api-Key,authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashmodule"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppAppDashmoduleAppmoduleidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Api-Key,authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PATCH'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashmoduleAppmoduleidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppAppDashpermissionOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Api-Key,authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashpermission"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppAppDashpermissionApppermissionidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Api-Key,authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PATCH'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashpermissionApppermissionidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppAppDashgroupOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Api-Key,authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashgroup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppAppDashgroupAppgroupidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Api-Key,authorization'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PATCH'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashgroupAppgroupidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAppS3DashmediaGetPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppS3DashmediaGet"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "S3MediaHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppS3DashmediaPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppS3Dashmedia"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "S3MediaHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayDevgxpserviceRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodAppS3DashmediaPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppS3DashmediaDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppS3Dashmedia"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "S3MediaHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayDevgxpserviceRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodAppS3DashmediaDeleteApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodHealthDashcheckGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHealthDashcheck"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LambdaHealthCheckLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LambdaHealthCheckLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAppAppDashplatformGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashplatform"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppPlatformListCreateUpdateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashplatformPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashplatform"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppPlatformListCreateUpdateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayDevgxpserviceRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodAppAppDashplatformPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashmoduleGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashmodule"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppModuleListCreateUpdateDestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashmodulePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashmodule"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppModuleListCreateUpdateDestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayDevgxpserviceRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodAppAppDashmodulePostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashmoduleAppmoduleidVarPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashmoduleAppmoduleidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppModuleListCreateUpdateDestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayDevgxpserviceRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodAppAppDashmoduleAppmoduleidVarPatchApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashmoduleAppmoduleidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashmoduleAppmoduleidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppModuleListCreateUpdateDestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashpermissionGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashpermission"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppPermissionListCreateUpdateDestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashpermissionPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashpermission"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppPermissionListCreateUpdateDestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayDevgxpserviceRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodAppAppDashpermissionPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashpermissionApppermissionidVarPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashpermissionApppermissionidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppPermissionListCreateUpdateDestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayDevgxpserviceRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodAppAppDashpermissionApppermissionidVarPatchApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashpermissionApppermissionidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashpermissionApppermissionidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppPermissionListCreateUpdateDestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashgroupGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashgroup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppGroupListCreateUpdateDestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashgroupPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashgroup"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppGroupListCreateUpdateDestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayDevgxpserviceRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodAppAppDashgroupPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashgroupAppgroupidVarPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashgroupAppgroupidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppGroupListCreateUpdateDestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayDevgxpserviceRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodAppAppDashgroupAppgroupidVarPatchApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAppAppDashgroupAppgroupidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAppAppDashgroupAppgroupidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "JwtAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AppGroupListCreateUpdateDestroyLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "JwtAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayDevgxpserviceRequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "dev-gxp-service-dev | Validate request body and querystring parameters"
            }
          },
          "ApiGatewayMethodAppS3DashmediaPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "title": "S3MediaFileUpload",
                "type": "object",
                "properties": {
                  "media_type": {
                    "type": "string",
                    "maxLength": 30,
                    "enum": [
                      "user_profile",
                      "brand_logo",
                      "brand_favicon",
                      "hotel_logo",
                      "hotel_favicon",
                      "hotel_info",
                      "building",
                      "floor",
                      "room_type",
                      "local_event",
                      "nearby_place",
                      "tv_channel",
                      "user_review",
                      "guest_doc",
                      "guest_selfie",
                      "guest_face",
                      "booking_excel",
                      "addon_item"
                    ]
                  },
                  "file_type": {
                    "type": "string",
                    "maxLength": 30,
                    "enum": [
                      "jpg",
                      "jpeg",
                      "png",
                      "svg",
                      "ico",
                      "pdf",
                      "doc",
                      "docx",
                      "xlsx",
                      "xls",
                      "mp4",
                      "ogg",
                      "mov",
                      "webm",
                      "mp3",
                      "wav"
                    ]
                  }
                },
                "required": [
                  "media_type",
                  "file_type"
                ],
                "additionalProperties": false
              }
            }
          },
          "ApiGatewayMethodAppS3DashmediaDeleteApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "title": "S3MediaFileDelete",
                "type": "object",
                "properties": {
                  "file_keys": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "ApiGatewayMethodAppAppDashplatformPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "title": "AppPlatformCreateUpdate",
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 250
                  },
                  "is_active": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "name"
                ],
                "additionalProperties": false
              }
            }
          },
          "ApiGatewayMethodAppAppDashmodulePostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "title": "AppModuleCreate",
                "type": "object",
                "properties": {
                  "app": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "module": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "is_delete": {
                    "type": "boolean"
                  },
                  "is_super": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "app",
                  "module",
                  "is_delete",
                  "is_super"
                ],
                "additionalProperties": false
              }
            }
          },
          "ApiGatewayMethodAppAppDashmoduleAppmoduleidVarPatchApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "title": "AppModuleUpdate",
                "type": "object",
                "properties": {
                  "app": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "module": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "is_super": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "ApiGatewayMethodAppAppDashpermissionPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "title": "AppPermissionCreate",
                "type": "object",
                "properties": {
                  "app_module_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "codename": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "is_delete": {
                    "type": "boolean"
                  },
                  "is_super": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "app_module_id",
                  "name",
                  "codename",
                  "is_delete",
                  "is_super"
                ],
                "additionalProperties": false
              }
            }
          },
          "ApiGatewayMethodAppAppDashpermissionApppermissionidVarPatchApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "title": "AppPermissionUpdate",
                "type": "object",
                "properties": {
                  "app_module_id": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "name": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "codename": {
                    "type": "string",
                    "maxLength": 100
                  },
                  "is_super": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "ApiGatewayMethodAppAppDashgroupPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "title": "AppGroupCreate",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 150
                  },
                  "is_delete": {
                    "type": "boolean"
                  },
                  "app_grouppermission": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "required": [
                  "name",
                  "is_delete",
                  "app_grouppermission"
                ],
                "additionalProperties": false
              }
            }
          },
          "ApiGatewayMethodAppAppDashgroupAppgroupidVarPatchApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "http://json-schema.org/draft-07/schema#",
                "title": "AppGroupUpdate",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 150
                  },
                  "app_grouppermission": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "additionalProperties": false
              }
            }
          },
          "JwtAuthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 0,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "JwtAuthorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "JwtAuthorizerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1718262109413": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAppS3DashmediaGetOptions",
              "ApiGatewayMethodAppS3DashmediaOptions",
              "ApiGatewayMethodHealthDashcheckOptions",
              "ApiGatewayMethodAppAppDashplatformOptions",
              "ApiGatewayMethodAppAppDashmoduleOptions",
              "ApiGatewayMethodAppAppDashmoduleAppmoduleidVarOptions",
              "ApiGatewayMethodAppAppDashpermissionOptions",
              "ApiGatewayMethodAppAppDashpermissionApppermissionidVarOptions",
              "ApiGatewayMethodAppAppDashgroupOptions",
              "ApiGatewayMethodAppAppDashgroupAppgroupidVarOptions",
              "ApiGatewayMethodAppS3DashmediaGetPut",
              "ApiGatewayMethodAppS3DashmediaPost",
              "ApiGatewayMethodAppS3DashmediaDelete",
              "ApiGatewayMethodHealthDashcheckGet",
              "ApiGatewayMethodAppAppDashplatformGet",
              "ApiGatewayMethodAppAppDashplatformPost",
              "ApiGatewayMethodAppAppDashmoduleGet",
              "ApiGatewayMethodAppAppDashmodulePost",
              "ApiGatewayMethodAppAppDashmoduleAppmoduleidVarPatch",
              "ApiGatewayMethodAppAppDashmoduleAppmoduleidVarDelete",
              "ApiGatewayMethodAppAppDashpermissionGet",
              "ApiGatewayMethodAppAppDashpermissionPost",
              "ApiGatewayMethodAppAppDashpermissionApppermissionidVarPatch",
              "ApiGatewayMethodAppAppDashpermissionApppermissionidVarDelete",
              "ApiGatewayMethodAppAppDashgroupGet",
              "ApiGatewayMethodAppAppDashgroupPost",
              "ApiGatewayMethodAppAppDashgroupAppgroupidVarPatch",
              "ApiGatewayMethodAppAppDashgroupAppgroupidVarDelete"
            ]
          },
          "ApiGatewayApiKey1": {
            "Type": "AWS::ApiGateway::ApiKey",
            "Properties": {
              "Enabled": true,
              "Name": "dev-gxp-service_apikey_dev",
              "StageKeys": [
                {
                  "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "StageName": "dev"
                }
              ]
            },
            "DependsOn": "ApiGatewayDeployment1718262109413"
          },
          "ApiGatewayUsagePlan": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "DependsOn": "ApiGatewayDeployment1718262109413",
            "Properties": {
              "ApiStages": [
                {
                  "ApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "Stage": "dev"
                }
              ],
              "Description": "Usage plan for dev-gxp-service dev stage",
              "UsagePlanName": "dev-gxp-service-dev"
            }
          },
          "ApiGatewayUsagePlanKey1": {
            "Type": "AWS::ApiGateway::UsagePlanKey",
            "Properties": {
              "KeyId": {
                "Ref": "ApiGatewayApiKey1"
              },
              "KeyType": "API_KEY",
              "UsagePlanId": {
                "Ref": "ApiGatewayUsagePlan"
              }
            }
          },
          "S3MediaHandlerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "S3MediaHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "JwtAuthorizerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "JwtAuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "LambdaHealthCheckLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LambdaHealthCheckLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AppPlatformListCreateUpdateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppPlatformListCreateUpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AppModuleListCreateUpdateDestroyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppModuleListCreateUpdateDestroyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AppPermissionListCreateUpdateDestroyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppPermissionListCreateUpdateDestroyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AppGroupListCreateUpdateDestroyLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AppGroupListCreateUpdateDestroyLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-dev-gxp-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "DbConnectionLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DbConnectionLambdaVersionUbHokbTP1kD9YvMJtcufQd5KefaeaYvequtAlI3tot0"
            },
            "Export": {
              "Name": "sls-dev-gxp-service-dev-DbConnectionLambdaFunctionQualifiedArn"
            }
          },
          "JwtAuthorizerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "JwtAuthorizerLambdaVersionsu7CGVqcqE93zUhrMFc7OSBZsXM310xPyfdye1Bw0I"
            },
            "Export": {
              "Name": "sls-dev-gxp-service-dev-JwtAuthorizerLambdaFunctionQualifiedArn"
            }
          },
          "S3MediaHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "S3MediaHandlerLambdaVersionQnlN9uwPBlzJagbRjmHsm2xt7d9wWCMXK1NEUutNgNo"
            },
            "Export": {
              "Name": "sls-dev-gxp-service-dev-S3MediaHandlerLambdaFunctionQualifiedArn"
            }
          },
          "LambdaHealthCheckLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LambdaHealthCheckLambdaVersionKejm3uVTGdpuX7QYSXXEOFhcr7QGFpAVMghkmD4AU"
            },
            "Export": {
              "Name": "sls-dev-gxp-service-dev-LambdaHealthCheckLambdaFunctionQualifiedArn"
            }
          },
          "AppPlatformListCreateUpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppPlatformListCreateUpdateLambdaVersion4J9AHntfnwZpoxb3HJEv1gqUKIUPYshvqUZqWMlITNo"
            },
            "Export": {
              "Name": "sls-dev-gxp-service-dev-AppPlatformListCreateUpdateLambdaFunctionQualifiedArn"
            }
          },
          "AppModuleListCreateUpdateDestroyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppModuleListCreateUpdateDestroyLambdaVersion1V5BNtDZKKsa5PJhiyXSN1wV2VzrBiLfLBtloAqLZk"
            },
            "Export": {
              "Name": "sls-dev-gxp-service-dev-AppModuleListCreateUpdateDestroyLambdaFunctionQualifiedArn"
            }
          },
          "AppPermissionListCreateUpdateDestroyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppPermissionListCreateUpdateDestroyLambdaVersionv6Cy3CeboufBGehbUkf164IFIaOqt4FLkvOiMZpGiU"
            },
            "Export": {
              "Name": "sls-dev-gxp-service-dev-AppPermissionListCreateUpdateDestroyLambdaFunctionQualifiedArn"
            }
          },
          "AppGroupListCreateUpdateDestroyLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AppGroupListCreateUpdateDestroyLambdaVersiontnl4Q1njI51YutCoF6JFKyqYkVNRJxEYLnxDujw"
            },
            "Export": {
              "Name": "sls-dev-gxp-service-dev-AppGroupListCreateUpdateDestroyLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-dev-gxp-service-dev-ServiceEndpoint"
            }
          },
          "ApiGatewayRestApiId": {
            "Value": {
              "Ref": "ApiGatewayRestApi"
            },
            "Export": {
              "Name": "dev-gxp-service-dev-ApiGatewayRestApiId"
            }
          },
          "ApiGatewayRestApiRootResourceId": {
            "Value": {
              "Fn::GetAtt": [
                "ApiGatewayRestApi",
                "RootResourceId"
              ]
            },
            "Export": {
              "Name": "dev-gxp-service-dev-ApiGatewayRestApiRootResourceId"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "corsConfig": {
        "origin": "*",
        "headers": [
          "Content-Type",
          "X-Api-Key",
          "authorization"
        ]
      },
      "authorizerConfig": {
        "name": "JwtAuthorizer",
        "resultTtlInSeconds": 0,
        "identitySource": "method.request.header.Authorization"
      },
      "jwtEnvironment": {
        "JWT_SECRET": "gxp-lambda-t8ud@*d!85fc7lfw1ft2d9$=ni@=oo8&#*ae#lzfkg(sej_1(936936-"
      }
    },
    "pluginsData": {},
    "functions": {
      "dbConnection": {
        "handler": "app_setting.db_conenction.dbConnection",
        "timeout": 20,
        "events": [],
        "name": "dev-gxp-service-dev-dbConnection",
        "package": {},
        "memory": 1024,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "DbConnectionLambdaVersionUbHokbTP1kD9YvMJtcufQd5KefaeaYvequtAlI3tot0"
      },
      "JwtAuthorizer": {
        "handler": "app_setting.jwt_auth.JwtAuthorizer",
        "timeout": 10,
        "environment": {
          "JWT_SECRET": "gxp-lambda-t8ud@*d!85fc7lfw1ft2d9$=ni@=oo8&#*ae#lzfkg(sej_1(936936-"
        },
        "events": [],
        "name": "dev-gxp-service-dev-JwtAuthorizer",
        "package": {},
        "memory": 1024,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "JwtAuthorizerLambdaVersionsu7CGVqcqE93zUhrMFc7OSBZsXM310xPyfdye1Bw0I"
      },
      "s3MediaHandler": {
        "handler": "app_setting.s3_media.s3MediaHandler",
        "events": [
          {
            "http": {
              "path": "app/s3-media/get",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "app/s3-media",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodAppS3DashmediaPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "app/s3-media",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodAppS3DashmediaDeleteApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dev-gxp-service-dev-s3MediaHandler",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "S3MediaHandlerLambdaVersionQnlN9uwPBlzJagbRjmHsm2xt7d9wWCMXK1NEUutNgNo"
      },
      "lambdaHealthCheck": {
        "handler": "app_setting.lambda_health.lambdaHealthCheck",
        "events": [
          {
            "http": {
              "path": "health-check",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dev-gxp-service-dev-lambdaHealthCheck",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "LambdaHealthCheckLambdaVersionKejm3uVTGdpuX7QYSXXEOFhcr7QGFpAVMghkmD4AU"
      },
      "appPlatformListCreateUpdate": {
        "handler": "app.app_platform.appPlatformListCreateUpdate",
        "events": [
          {
            "http": {
              "path": "app/app-platform",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "app/app-platform",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodAppAppDashplatformPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dev-gxp-service-dev-appPlatformListCreateUpdate",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "AppPlatformListCreateUpdateLambdaVersion4J9AHntfnwZpoxb3HJEv1gqUKIUPYshvqUZqWMlITNo"
      },
      "appModuleListCreateUpdateDestroy": {
        "handler": "app.app_module.appModuleListCreateUpdateDestroy",
        "events": [
          {
            "http": {
              "path": "app/app-module",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "app/app-module",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodAppAppDashmodulePostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "app/app-module/{app_module_id}",
              "method": "patch",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PATCH"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodAppAppDashmoduleAppmoduleidVarPatchApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "app/app-module/{app_module_id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dev-gxp-service-dev-appModuleListCreateUpdateDestroy",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "AppModuleListCreateUpdateDestroyLambdaVersion1V5BNtDZKKsa5PJhiyXSN1wV2VzrBiLfLBtloAqLZk"
      },
      "appPermissionListCreateUpdateDestroy": {
        "handler": "app.app_permission.appPermissionListCreateUpdateDestroy",
        "events": [
          {
            "http": {
              "path": "app/app-permission",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "app/app-permission",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodAppAppDashpermissionPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "app/app-permission/{app_permission_id}",
              "method": "patch",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PATCH"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodAppAppDashpermissionApppermissionidVarPatchApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "app/app-permission/{app_permission_id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dev-gxp-service-dev-appPermissionListCreateUpdateDestroy",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "AppPermissionListCreateUpdateDestroyLambdaVersionv6Cy3CeboufBGehbUkf164IFIaOqt4FLkvOiMZpGiU"
      },
      "appGroupListCreateUpdateDestroy": {
        "handler": "app.app_group.appGroupListCreateUpdateDestroy",
        "events": [
          {
            "http": {
              "path": "app/app-group",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "app/app-group",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodAppAppDashgroupPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "app/app-group/{app_group_id}",
              "method": "patch",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PATCH"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodAppAppDashgroupAppgroupidVarPatchApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "app/app-group/{app_group_id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Api-Key",
                  "authorization"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "name": "JwtAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JwtAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "dev-gxp-service-dev-appGroupListCreateUpdateDestroy",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "AppGroupListCreateUpdateDestroyLambdaVersiontnl4Q1njI51YutCoF6JFKyqYkVNRJxEYLnxDujw"
      }
    },
    "resources": {
      "Outputs": {
        "ApiGatewayRestApiId": {
          "Value": {
            "Ref": "ApiGatewayRestApi"
          },
          "Export": {
            "Name": "dev-gxp-service-dev-ApiGatewayRestApiId"
          }
        },
        "ApiGatewayRestApiRootResourceId": {
          "Value": {
            "Fn::GetAtt": [
              "ApiGatewayRestApi",
              "RootResourceId"
            ]
          },
          "Export": {
            "Name": "dev-gxp-service-dev-ApiGatewayRestApiRootResourceId"
          }
        }
      },
      "Resources": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "dev-gxp-service",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "include": [
          "../utils/**",
          "../templates/**"
        ],
        "artifactsS3KeyDirname": "serverless/dev-gxp-service/dev/code-artifacts",
        "artifact": "C:\\Users\\kisha\\Desktop\\pms_dev\\GXP-Lambda\\MainStack\\.serverless\\dev-gxp-service.zip",
        "artifactDirectoryName": "serverless/dev-gxp-service/dev/1718262114617-2024-06-13T07:01:54.617Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\kisha\\Desktop\\pms_dev\\GXP-Lambda\\MainStack\\.serverless\\dev-gxp-service.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/dev-gxp-service/dev/1718262114617-2024-06-13T07:01:54.617Z",
    "artifact": "dev-gxp-service.zip"
  }
}